"""
JSON Processing and Validation Utilities for Deep Research System

This module provides essential JSON processing utilities for handling tool arguments,
API responses, and data validation throughout the Deep Research workflow. It offers
functions for sanitizing input data and repairing malformed JSON strings.

Key Functions:
    sanitize_args(args): Sanitizes tool call arguments for safe processing
        - args: Any - Tool call arguments that may contain special characters
        - Returns: str - Sanitized string with HTML entity encoding
        - Handles bracket and brace characters that can break parsing
        - Prevents injection attacks and parsing errors
        
    repair_json_output(content): Repairs and validates JSON content
        - content: str - String that may contain malformed JSON
        - Returns: str - Repaired JSON string or original content if not JSON
        - Uses json_repair library for automatic JSON fixing
        - Validates JSON structure and format

Sanitization Features:
    Special Character Handling:
        - Square brackets: [ → &#91;, ] → &#93;
        - Curly braces: { → &#123;, } → &#125;
        - HTML entity encoding for safe transmission
        - Preserves content while preventing parsing issues
        
    Input Validation:
        - Type checking to ensure string input
        - Graceful handling of non-string arguments
        - Empty string fallback for invalid input
        - Non-destructive processing

JSON Repair Features:
    Automatic Repair:
        - Fixes common JSON syntax errors
        - Handles missing quotes, brackets, and commas
        - Repairs truncated JSON structures
        - Normalizes formatting and encoding
        
    Structure Validation:
        - Ensures repaired content is valid JSON object or array
        - Validates data types and structure integrity
        - Rejects non-JSON content after repair attempts
        - Maintains data consistency

    Format Normalization:
        - Consistent JSON formatting with proper indentation
        - Unicode handling with ensure_ascii=False
        - Proper escape sequence handling
        - Standardized output format

Error Handling:
    Sanitization Errors:
        - Type validation with fallback to empty string
        - Non-destructive error handling
        - Logging for debugging and monitoring
        
    JSON Repair Errors:
        - Graceful fallback to original content
        - Detailed error logging with exception information
        - Non-breaking operation when repair fails
        - Warning messages for troubleshooting

Use Cases:
    Tool Integration:
        - Sanitizes tool call arguments before processing
        - Prevents parsing errors in tool execution
        - Ensures safe data transmission between components
        
    API Processing:
        - Repairs malformed JSON responses from external APIs
        - Validates JSON structure before parsing
        - Handles network-related JSON corruption
        
    LLM Output Processing:
        - Cleans up JSON generated by language models
        - Fixes common LLM JSON formatting issues
        - Validates structured output from AI models
        
    Data Pipeline:
        - Ensures data integrity throughout processing pipeline
        - Handles edge cases in data transformation
        - Provides consistent data formatting

Integration Points:
    - Tool System: Used by tools for argument sanitization
    - API Layer: JSON validation and repair for responses
    - Server Components: Safe data handling in FastAPI endpoints
    - Workflow Processing: Data validation throughout research pipeline

Security Considerations:
    - Prevents injection attacks through proper sanitization
    - Safe handling of user-generated content
    - HTML entity encoding for secure data transmission
    - Input validation to prevent malicious data processing

The module provides essential data processing utilities that ensure robust
operation and data integrity throughout the Deep Research system.
"""

import json
import logging
from typing import Any
import json_repair

logger = logging.getLogger(__name__)


def sanitize_args(args: Any) -> str:
    """
    Sanitize tool call arguments to prevent special character issues.

    Args:
        args: Tool call arguments string

    Returns:
        str: Sanitized arguments string
    """
    if not isinstance(args, str):
        return ""
    else:
        return (
            args.replace("[", "&#91;")
            .replace("]", "&#93;")
            .replace("{", "&#123;")
            .replace("}", "&#125;")
        )


def repair_json_output(content: str) -> str:
    """
    Repair and normalize JSON output.

    Args:
        content (str): String content that may contain JSON

    Returns:
        str: Repaired JSON string, or original content if not JSON
    """
    content = content.strip()

    try:
        # Try to repair and parse JSON
        repaired_content = json_repair.loads(content)
        if not isinstance(repaired_content, dict) and not isinstance(
            repaired_content, list
        ):
            logger.warning("Repaired content is not a valid JSON object or array.")
            return content
        content = json.dumps(repaired_content, ensure_ascii=False)
    except Exception as e:
        logger.warning(f"JSON repair failed: {e}")

    return content
